<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最近记录1</title>
      <link href="/2024/12/17/%E6%9C%80%E8%BF%91%E8%AE%B0%E5%BD%951/"/>
      <url>/2024/12/17/%E6%9C%80%E8%BF%91%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h4 id="使用流来请求并且接收api"><a href="#使用流来请求并且接收api" class="headerlink" title="使用流来请求并且接收api"></a>使用流来请求并且接收api</h4><p>通过流来请求url路径并且获取数据</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//组装的数据</span><br><span class="line">String s = JsonUtil.objectToString(req);</span><br><span class="line">//                 s = URLEncoder.encode(s, &quot;UTF-8&quot;);</span><br><span class="line">//组装链接,用流接受信息</span><br><span class="line">inStream = HttpRUtil.sendBasePost(outqueryUrl+&quot;/outquery/dp/getDamageImagesBase&quot;,s,null);</span><br><span class="line">                 </span><br><span class="line">                 </span><br><span class="line">                 </span><br><span class="line">//发送http请求</span><br><span class="line">public static InputStream sendBasePost(String url, String param, Map&lt;String,String&gt; headers) &#123;</span><br><span class="line">       //获取URLConnection对象对应的输出流</span><br><span class="line">       PrintWriter out = null;</span><br><span class="line">       //获取响应的输入流</span><br><span class="line">        InputStream responseStream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL realUrl = new URL(url);</span><br><span class="line">            // 打开和URL之间的连接</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line">            // 设置通用的请求属性</span><br><span class="line">            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;content-Type&quot;, &quot;application/json; charset=utf-8&quot;);</span><br><span class="line">            if(headers != null &amp;&amp; headers.size() &gt; 0)&#123;</span><br><span class="line">                for (String key : headers.keySet())&#123;</span><br><span class="line">                    conn.setRequestProperty(key, headers.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 发送POST请求必须设置如下两行</span><br><span class="line">            conn.setDoOutput(true);</span><br><span class="line">            conn.setDoInput(true);</span><br><span class="line">            // 设置超时时间</span><br><span class="line">            conn.setConnectTimeout(10000); // 10秒连接</span><br><span class="line">            conn.setReadTimeout(60000); // 60秒读取</span><br><span class="line">            // 获取URLConnection对象对应的输出流</span><br><span class="line">            out = new PrintWriter(conn.getOutputStream());</span><br><span class="line">            // 发送请求参数</span><br><span class="line">            out.print(param);</span><br><span class="line">            // flush输出流的缓冲</span><br><span class="line">            out.flush();</span><br><span class="line">            // 获取响应的输入流</span><br><span class="line">            responseStream = conn.getInputStream();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;发送 POST 请求出现异常！&#123;&#125;&quot;, e);</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                if(out!=null)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                log.error(&quot;流关闭异常: &#123;&#125;&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return responseStream;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="流操作-构建Map"><a href="#流操作-构建Map" class="headerlink" title="流操作,构建Map&lt;Long,Map&lt;Long,Long&gt;&gt;"></a>流操作,构建Map&lt;Long,Map&lt;Long,Long&gt;&gt;</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, Map&lt;Long, Long&gt;&gt; longMapMap = enquiryIdMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -&gt;</span><br><span class="line">       entry.getValue().stream().collect(Collectors.toMap(JcShopEnquiryParts::getDamagePartsId, JcShopEnquiryParts::getEnquiryPartsId))</span><br><span class="line">));</span><br></pre></td></tr></table></figure></div><h4 id="事务操作-在一个事务里面执行远程调用服务回调"><a href="#事务操作-在一个事务里面执行远程调用服务回调" class="headerlink" title="事务操作,在一个事务里面执行远程调用服务回调"></a>事务操作,在一个事务里面执行远程调用服务回调</h4><p>通过加入节点的方式也就是rabbitmq,使用封装过的</p><p><a class="link"   href="https://blog.csdn.net/qq_45990281/article/details/142397092?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-142397092-blog-106024311.235%5Ev43%5Epc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.1&utm_relevant_index=3" >https://blog.csdn.net/qq_45990281/article/details/142397092?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-142397092-blog-106024311.235^v43^pc_blog_bottom_relevance_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1732959155321.png"                      alt="73295914339"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1732959163232.png"                      alt="73295916323"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734332220278.png"                      alt="73433222027"                ></p><p>可以用事务同步,在一个事务中如果需要同时查找此事务操作过的数据,可以通过事务同步管理器来进行,此方法可以保证此操作在本始事务提交之后再进行,从而保证了调用别的操作的时候数据已经更新</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 注册事务同步</span><br><span class="line">           TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void afterCommit() &#123;</span><br><span class="line">                   // 事务提交后的回调操作</span><br><span class="line">                   try &#123;</span><br><span class="line">                       Res res = damageClient.batchPurchaseIntentOrder(damageVo);</span><br><span class="line">                       log.info(&quot;已同意,但未生成订单，damageId:&#123;&#125;,议价单ID:&#123;&#125;,结果: &#123;&#125;&quot;,</span><br><span class="line">                               enquiryVo.getDamageId(), vo.getNegotiateId(), JSONObject.toJSONString(res));</span><br><span class="line">                   &#125; catch (Exception e) &#123;</span><br><span class="line">                       log.error(&quot;调用下单服务失败，damageId:&#123;&#125;,议价单ID:&#123;&#125;&quot;, enquiryVo.getDamageId(), vo.getNegotiateId(), e);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure></div><p>关于 getPartnum() 方法的返回类型</p><h5 id="转换BigDecimal"><a href="#转换BigDecimal" class="headerlink" title="转换BigDecimal"></a>转换BigDecimal</h5><p>BigDecimal partPrice &#x3D; new BigDecimal(jcShopDamageParts.getPtprice().toString()).multiply(new BigDecimal(jcShopDamageParts.getPartnum()));</p><p>构建BigDecimal 的时候如果是Double转换,有可能会产生精度问题,因此最好转化为String,再转化为BigDecimal,而int这种或者Long,就不会有精度问题,可以直接传给构造BigDecimal的数据类型</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiply就是乘的意思,这一句就是将每一个配件的单价乘以他对应的数量算出来总价后相加</span><br></pre></td></tr></table></figure></div><p>返回类型：<br>通常情况下，getPartnum() 方法返回的是一个表示数量的数值类型，可能是 int、long 或 Integer、Long 等。<br>在你的代码中，getPartnum() 的返回值被传递给了 BigDecimal 的构造函数，这表明 getPartnum() 返回的值应该是可以转换为 BigDecimal 的类型。<br>使用 BigDecimal 构造函数：<br>如果 getPartnum() 返回的是 int 或 long，可以直接传递给 BigDecimal 构造函数，不需要转换为 String。<br>如果 getPartnum() 返回的是 Integer 或 Long，也可以直接传递给 BigDecimal 构造函数，因为 BigDecimal 有对应的构造函数支持这些类型。<br>示例代码<br>假设 getPartnum() 返回的是 int 类型：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733471026050.png"                      alt="73347102605"                ></p><h4 id="java虚拟机黑盒"><a href="#java虚拟机黑盒" class="headerlink" title="java虚拟机黑盒"></a>java虚拟机黑盒</h4><p>内部是怎么实现,类装载子系统-&gt;运行时数据区-&gt;字节码执行文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733712627384.png"                      alt="73371262738"                ></p><p>栈(线程),内存区域用来放线程运行地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733712817051.png"                      alt="73371281705"                ></p><p>从栈里面划一片线程栈内存区,就是每一个线程都会从栈里面划一片内存区域,每一个方法的内存空间是相互隔离的,方法结束就销毁,好管理每一个方法的局部变量,一个方法会对应一个<strong>栈帧内存区域</strong>,数据结构里面有一个栈,先执行完的先出栈,main方法最先进栈,最后出栈</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733714267353.png"                      alt="73371426735"                ></p><p>1.生成唯一标识：生成一个唯一的 uuid 和当前时间 reqDate，并记录日志。<br>2.检查输入参数：如果 damage 对象为 null 或其状态为 “0”，则直接返回。<br>3.获取配件列表：从 damage 对象中获取配件列表 shopDamagePartsList，如果列表为空，则直接返回。<br>组装请求数据：<br>4.创建 RequestBaseToClaimVo 对象 baseInfo，并设置 damageNo。<br>5.遍历配件列表，创建 ResponsePartVo 对象 responsePart，设置配件名称、OE号、类型、数量等信息。<br>6.根据配件的 buyflag 判断是否已确认报价，并设置相应的报价信息和供应商信息。<br>7.发送请求：<br>8.将 baseInfo 转换为 JSON 字符串 requstStr。<br>9.调用 outAppClient.transfer 方法发送请求，并记录日志。<br>10.处理响应：<br>如果响应不为空，解析响应字符串为 Map 对象 resultMap。<br>检查 resultMap 中的 status，根据结果更新 sendVapStatus。<br>更新状态：<br>调用 jcShopDamagePartsDao.updateSendVapStatusByDamageId 方法更新推送状态。<br>记录日志：记录最终的返回信息。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">    @Test</span><br><span class="line">    public void testMethodName() &#123;</span><br><span class="line">        extracted();</span><br><span class="line">        List&lt;Person&gt; personList1 = getPeople();</span><br><span class="line"></span><br><span class="line">//        extracted1();</span><br><span class="line"></span><br><span class="line">//        extracted2(personList1);</span><br><span class="line"></span><br><span class="line">//        extracted3(personList1);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 4, 11, 6);</span><br><span class="line"></span><br><span class="line">        // 自然排序</span><br><span class="line">        Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">        // 自定义排序（从大到小排序）</span><br><span class="line">//        Optional&lt;Integer&gt; min = list.stream().max();</span><br><span class="line">//        Optional&lt;Integer&gt; max22 = list.stream().max((o1, o2) -&gt; o2 - o1);</span><br><span class="line">//        Optional&lt;Integer&gt; max2 = list.stream().min((o2, o1) -&gt; o2 - o1);</span><br><span class="line">//        System.out.println(&quot;自然排序的最大值：&quot; + max.get());</span><br><span class="line">//        System.out.println(&quot;自定义排序的最大值：&quot; + max2.get());</span><br><span class="line">//        System.out.println(&quot;自定义排序的22最大值：&quot; + max22.get());</span><br><span class="line">//        System.out.println(&quot;自定义排序的最小值：&quot; + min.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        Optional&lt;Person&gt; max = personList1.stream().min(Comparator.comparing(Person::getName));</span><br><span class="line">//        System.out.println(&quot;最长的字符串：&quot; + max.get());</span><br><span class="line"></span><br><span class="line">//        Optional&lt;Person&gt; max1 = personList1.stream().max(Comparator.comparing(Person::getSalary));</span><br><span class="line">//        System.out.println(&quot;员工薪资最大值：&quot; + max1.get().getSalary());</span><br><span class="line">//        System.out.println(5500*12);</span><br><span class="line">//        extracted4(personList1);</span><br><span class="line"></span><br><span class="line">//        extracted6();</span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(&quot;mu&quot;, &quot;CSDN&quot;, &quot;hello&quot;,</span><br><span class="line">                &quot;world&quot;, &quot;quickly&quot;);</span><br><span class="line">        stringList.stream().mapToInt(String::length).forEach(x -&gt; System.out.print(x+&quot; &quot;));</span><br><span class="line">        // 将int集合的每个元素增加1000</span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(4, 5, 2, 1, 6, 3);</span><br><span class="line">        integerList.stream().mapToInt(x -&gt; x + 1000).forEach(x -&gt; System.out.print(x+&quot; &quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void extracted6() &#123;</span><br><span class="line">        List&lt;String&gt; lis2t = Arrays.asList(&quot;m-k-l-a&quot;, &quot;1-3-5-7&quot;);</span><br><span class="line">        List&lt;String&gt; collect = lis2t.stream().flatMap(s -&gt; &#123;</span><br><span class="line">            String[] split = s.split(&quot;-&quot;);</span><br><span class="line">            return Arrays.stream(split);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; listNew = lis2t.stream().flatMap(s -&gt; &#123;</span><br><span class="line">            // 将每个元素转换成一个stream</span><br><span class="line">            String[] split = s.split(&quot;-&quot;);</span><br><span class="line">            Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">            return s2;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;处理前的集合：&quot; + lis2t+&quot;-----&quot; +collect);</span><br><span class="line">        System.out.println(&quot;处理后的集合：&quot; + listNew);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted4(List&lt;Person&gt; personList1) &#123;</span><br><span class="line">        List&lt;Person&gt; collect = personList1.stream().map(person -&gt; &#123;</span><br><span class="line">            Person person1 = new Person(person.getName(), person.getSalary(), person.getAge(), person.getSex(), person.getArea());</span><br><span class="line">            person1.setSalary(person.getSalary() + 10000);</span><br><span class="line">            return person1;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(&quot;一次改动前：&quot; + personList1 + &quot;--&gt;&quot; + personList1.get(0).getSalary());</span><br><span class="line">        System.out.println(&quot;一次改动后：&quot; + collect + &quot;--&gt;&quot; + collect.get(0).getSalary());</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; collect2 = personList1.stream().map(person -&gt; &#123;</span><br><span class="line">            person.setSalary(person.getSalary() + 10000);</span><br><span class="line">            return person;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(&quot;一次改动前：&quot; + personList1 + &quot;--&gt;&quot; + personList1.get(0).getSalary());</span><br><span class="line">        System.out.println(&quot;一次改动后：&quot; + collect2 + &quot;--&gt;&quot; + collect2.get(0).getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted3(List&lt;Person&gt; personList1) &#123;</span><br><span class="line">        Optional&lt;Person&gt; max = personList1.stream()</span><br><span class="line">                .filter(x -&gt; x.getSalary() &gt; 100000)</span><br><span class="line">                .max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">        System.out.println(max.orElse(null));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted2(List&lt;Person&gt; personList1) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map =  personList1.stream().filter(x -&gt; x.getSalary() &gt; 8000).collect(Collectors.toMap(Person::getName, Person::getAge));</span><br><span class="line">        System.out.print(&quot;薪资高于8000美元的员工：&quot; + map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;Person&gt; getPeople() &#123;</span><br><span class="line">        List&lt;Person&gt; personList1 = new ArrayList&lt;Person&gt;();</span><br><span class="line">        personList1.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Owen&quot;, 95000, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Alisa&quot;, 79000, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        return personList1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted() &#123;</span><br><span class="line">        List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(new Person(&quot;Tom&quot;, 8900, 18,&quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Jack&quot;, 7000, 20,&quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Lily&quot;, 7800, 22,&quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Anni&quot;, 8200, 28,&quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Owen&quot;, 9500, 30,&quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Alisa&quot;, 7900, 40,&quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void extracted1() &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);</span><br><span class="line">        // 遍历输出符合条件的元素</span><br><span class="line">        list.stream().filter(x -&gt; x&gt;6).forEach(System.out::println);</span><br><span class="line">        // 匹配第一个</span><br><span class="line">        Optional&lt;Integer&gt; first = list.stream().filter(x -&gt; x &gt; 8).findFirst();</span><br><span class="line">        // 匹配任意（适用于并行流）</span><br><span class="line">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; 6).findAny();</span><br><span class="line">        // 是否包含符合特定条件的元素</span><br><span class="line">        boolean anyMatch = list.stream().anyMatch(x -&gt; x &gt; 6);</span><br><span class="line">        System.out.println(&quot;匹配第一个值：&quot; + first.get());</span><br><span class="line">        System.out.println(&quot;匹配任意一个值：&quot; + findAny.get());</span><br><span class="line">        System.out.println(&quot;是否存在大于6的值：&quot; + anyMatch);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    public class Person &#123;</span><br><span class="line">        private String name;  // 姓名</span><br><span class="line">        private int salary; // 薪资</span><br><span class="line">        private int age; // 年龄</span><br><span class="line">        private String sex; //性别</span><br><span class="line">        private String area;  // 地区</span><br><span class="line"></span><br><span class="line">        // 构造方法</span><br><span class="line">        public Person(String name, int salary, int age,String sex,String area) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.salary = salary;</span><br><span class="line">            this.age = age;</span><br><span class="line">            this.sex = sex;</span><br><span class="line">            this.area = area;</span><br><span class="line">        &#125;</span><br><span class="line">        // 省略了get和set，请自行添加</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询定损单照片</span><br><span class="line"> * @param registNo</span><br><span class="line"> * @param damageNo</span><br><span class="line"> * @param infoid</span><br><span class="line"> * @param carNo</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public R getDamagePicture(GetClaimPhotoReqVo vo) &#123;</span><br><span class="line">    Res damagePicture = janpEnquiryInnerClient.getDamagePicture(vo);</span><br><span class="line">    ArrayList date = (ArrayList) damagePicture.getData();</span><br><span class="line">    if(date!=null)&#123;</span><br><span class="line">        if(&quot;200&quot;.equals(damagePicture.getCode()))&#123;</span><br><span class="line">            return R.ok(&quot;成功&quot;,date);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return R.error(damagePicture.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return R.error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询定损单照片</span><br><span class="line">     * @param registNo</span><br><span class="line">     * @param damageNo</span><br><span class="line">     * @param infoid</span><br><span class="line">     * @param carNo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public R getDamagePicture(GetClaimPhotoReqVo vo) &#123;</span><br><span class="line">        Res damagePicture = janpEnquiryInnerClient.getDamagePicture(vo);</span><br><span class="line">        ArrayList date = (ArrayList) damagePicture.getData();</span><br><span class="line">        if(date!=null)&#123;</span><br><span class="line">            if(&quot;200&quot;.equals(damagePicture.getCode()))&#123;</span><br><span class="line">                return R.ok(&quot;成功&quot;,date);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return R.error(damagePicture.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return R.error();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if(&quot;AIYH&quot;.equals(shopDamage.getChannelSource()) || &quot;24&quot;.equals(shopDamage.getDataSource()))&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h5><p>1.git Reset Current Branch to Here 回退到这个版本,之前的版本都会取消</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399624717.png"                      alt="73439962471"                ></p><p>2.git Revert 某一个版本撤回,保留之后的版本,生成新的版本</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399642044.png"                      alt="73439964204"                ></p><table><thead><tr><th></th><th>工作区</th><th>暂存区</th><th>版本库</th></tr></thead><tbody><tr><td>soft</td><td>不变</td><td>不变</td><td>回退</td></tr><tr><td>maed</td><td>不变</td><td>回退</td><td>回退</td></tr><tr><td>hard</td><td>回退</td><td>回退</td><td>回退</td></tr></tbody></table><p>git reflog 看历史记录,记录前面的id git -&gt;Reset HEAD -&gt;To commit,将id赋值,-&gt;vaildate-&gt;选择Hard-&gt;reset</p><h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><p>rollback</p><h5 id="搁置当前"><a href="#搁置当前" class="headerlink" title="搁置当前"></a>搁置当前</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734316127427.png"                      alt="73431612742"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734316141938.png"                      alt="73431614193"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734316168813.png"                      alt="73431616881"                ></p><p>​Changes可以修改名字,记录搁置的信息</p><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p>用git 删除记录文件</p><h5 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734326915273.png"                      alt="73432691527"                ></p><p>git fetch 和 git pull 前者是更新但是不合并,需要先查看更新 git log -p FETCH_HEAD 然后再git merge origin&#x2F;master ,</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734334939877.png"                      alt="73433493987"                ></p><p>merge用共用分支</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399738570.png"                      alt="73439973857"                ></p><p>Rebase用于私有分支</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399747407.png"                      alt="73439974740"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734335310378.png"                      alt="73433531037"                ></p><p>Undo Commit 撤回,如果没有Push的话, 没有记录\</p><h5 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734335971868.png"                      alt="73433597186"                ></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/04/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
      <url>/2024/12/04/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="使用流来请求并且接收api"><a href="#使用流来请求并且接收api" class="headerlink" title="使用流来请求并且接收api"></a>使用流来请求并且接收api</h4><p>通过流来请求url路径并且获取数据</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//组装的数据</span><br><span class="line">String s = JsonUtil.objectToString(req);</span><br><span class="line">//                 s = URLEncoder.encode(s, &quot;UTF-8&quot;);</span><br><span class="line">//组装链接,用流接受信息</span><br><span class="line">inStream = HttpRUtil.sendBasePost(outqueryUrl+&quot;/outquery/dp/getDamageImagesBase&quot;,s,null);</span><br><span class="line">                 </span><br><span class="line">                 </span><br><span class="line">                 </span><br><span class="line">//发送http请求</span><br><span class="line">public static InputStream sendBasePost(String url, String param, Map&lt;String,String&gt; headers) &#123;</span><br><span class="line">       //获取URLConnection对象对应的输出流</span><br><span class="line">       PrintWriter out = null;</span><br><span class="line">       //获取响应的输入流</span><br><span class="line">        InputStream responseStream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL realUrl = new URL(url);</span><br><span class="line">            // 打开和URL之间的连接</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line">            // 设置通用的请求属性</span><br><span class="line">            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;content-Type&quot;, &quot;application/json; charset=utf-8&quot;);</span><br><span class="line">            if(headers != null &amp;&amp; headers.size() &gt; 0)&#123;</span><br><span class="line">                for (String key : headers.keySet())&#123;</span><br><span class="line">                    conn.setRequestProperty(key, headers.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 发送POST请求必须设置如下两行</span><br><span class="line">            conn.setDoOutput(true);</span><br><span class="line">            conn.setDoInput(true);</span><br><span class="line">            // 设置超时时间</span><br><span class="line">            conn.setConnectTimeout(10000); // 10秒连接</span><br><span class="line">            conn.setReadTimeout(60000); // 60秒读取</span><br><span class="line">            // 获取URLConnection对象对应的输出流</span><br><span class="line">            out = new PrintWriter(conn.getOutputStream());</span><br><span class="line">            // 发送请求参数</span><br><span class="line">            out.print(param);</span><br><span class="line">            // flush输出流的缓冲</span><br><span class="line">            out.flush();</span><br><span class="line">            // 获取响应的输入流</span><br><span class="line">            responseStream = conn.getInputStream();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;发送 POST 请求出现异常！&#123;&#125;&quot;, e);</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                if(out!=null)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                log.error(&quot;流关闭异常: &#123;&#125;&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return responseStream;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="流操作-构建Map"><a href="#流操作-构建Map" class="headerlink" title="流操作,构建Map&lt;Long,Map&lt;Long,Long&gt;&gt;"></a>流操作,构建Map&lt;Long,Map&lt;Long,Long&gt;&gt;</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, Map&lt;Long, Long&gt;&gt; longMapMap = enquiryIdMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -&gt;</span><br><span class="line">       entry.getValue().stream().collect(Collectors.toMap(JcShopEnquiryParts::getDamagePartsId, JcShopEnquiryParts::getEnquiryPartsId))</span><br><span class="line">));</span><br></pre></td></tr></table></figure></div><h4 id="事务操作-在一个事务里面执行远程调用服务回调"><a href="#事务操作-在一个事务里面执行远程调用服务回调" class="headerlink" title="事务操作,在一个事务里面执行远程调用服务回调"></a>事务操作,在一个事务里面执行远程调用服务回调</h4><p>通过加入节点的方式也就是rabbitmq,使用封装过的</p><p><a class="link"   href="https://blog.csdn.net/qq_45990281/article/details/142397092?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-142397092-blog-106024311.235%5Ev43%5Epc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.1&utm_relevant_index=3" >https://blog.csdn.net/qq_45990281/article/details/142397092?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-142397092-blog-106024311.235^v43^pc_blog_bottom_relevance_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1732959155321.png"                      alt="73295914339"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1732959163232.png"                      alt="73295916323"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734332220278.png"                      alt="73433222027"                ></p><p>可以用事务同步,在一个事务中如果需要同时查找此事务操作过的数据,可以通过事务同步管理器来进行,此方法可以保证此操作在本始事务提交之后再进行,从而保证了调用别的操作的时候数据已经更新</p><pre><code> // 注册事务同步            TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() &#123;                @Override                public void afterCommit() &#123;                    // 事务提交后的回调操作                    try &#123;                        Res res = damageClient.batchPurchaseIntentOrder(damageVo);                        log.info(&quot;已同意,但未生成订单，damageId:&#123;&#125;,议价单ID:&#123;&#125;,结果: &#123;&#125;&quot;,                                enquiryVo.getDamageId(), vo.getNegotiateId(), JSONObject.toJSONString(res));                    &#125; catch (Exception e) &#123;                        log.error(&quot;调用下单服务失败，damageId:&#123;&#125;,议价单ID:&#123;&#125;&quot;, enquiryVo.getDamageId(), vo.getNegotiateId(), e);                    &#125;                &#125;            &#125;);</code></pre><p>关于 getPartnum() 方法的返回类型</p><h5 id="转换BigDecimal"><a href="#转换BigDecimal" class="headerlink" title="转换BigDecimal"></a>转换BigDecimal</h5><p>BigDecimal partPrice &#x3D; new BigDecimal(jcShopDamageParts.getPtprice().toString()).multiply(new BigDecimal(jcShopDamageParts.getPartnum()));</p><p>构建BigDecimal 的时候如果是Double转换,有可能会产生精度问题,因此最好转化为String,再转化为BigDecimal,而int这种或者Long,就不会有精度问题,可以直接传给构造BigDecimal的数据类型</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiply就是乘的意思,这一句就是将每一个配件的单价乘以他对应的数量算出来总价后相加</span><br></pre></td></tr></table></figure></div><p>返回类型：<br>通常情况下，getPartnum() 方法返回的是一个表示数量的数值类型，可能是 int、long 或 Integer、Long 等。<br>在你的代码中，getPartnum() 的返回值被传递给了 BigDecimal 的构造函数，这表明 getPartnum() 返回的值应该是可以转换为 BigDecimal 的类型。<br>使用 BigDecimal 构造函数：<br>如果 getPartnum() 返回的是 int 或 long，可以直接传递给 BigDecimal 构造函数，不需要转换为 String。<br>如果 getPartnum() 返回的是 Integer 或 Long，也可以直接传递给 BigDecimal 构造函数，因为 BigDecimal 有对应的构造函数支持这些类型。<br>示例代码<br>假设 getPartnum() 返回的是 int 类型：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733471026050.png"                      alt="73347102605"                ></p><h4 id="java虚拟机黑盒"><a href="#java虚拟机黑盒" class="headerlink" title="java虚拟机黑盒"></a>java虚拟机黑盒</h4><p>内部是怎么实现,类装载子系统-&gt;运行时数据区-&gt;字节码执行文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733712627384.png"                      alt="73371262738"                ></p><p>栈(线程),内存区域用来放线程运行地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733712817051.png"                      alt="73371281705"                ></p><p>从栈里面划一片线程栈内存区,就是每一个线程都会从栈里面划一片内存区域,每一个方法的内存空间是相互隔离的,方法结束就销毁,好管理每一个方法的局部变量,一个方法会对应一个<strong>栈帧内存区域</strong>,数据结构里面有一个栈,先执行完的先出栈,main方法最先进栈,最后出栈</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1733714267353.png"                      alt="73371426735"                ></p><p>1.生成唯一标识：生成一个唯一的 uuid 和当前时间 reqDate，并记录日志。<br>2.检查输入参数：如果 damage 对象为 null 或其状态为 “0”，则直接返回。<br>3.获取配件列表：从 damage 对象中获取配件列表 shopDamagePartsList，如果列表为空，则直接返回。<br>组装请求数据：<br>4.创建 RequestBaseToClaimVo 对象 baseInfo，并设置 damageNo。<br>5.遍历配件列表，创建 ResponsePartVo 对象 responsePart，设置配件名称、OE号、类型、数量等信息。<br>6.根据配件的 buyflag 判断是否已确认报价，并设置相应的报价信息和供应商信息。<br>7.发送请求：<br>8.将 baseInfo 转换为 JSON 字符串 requstStr。<br>9.调用 outAppClient.transfer 方法发送请求，并记录日志。<br>10.处理响应：<br>如果响应不为空，解析响应字符串为 Map 对象 resultMap。<br>检查 resultMap 中的 status，根据结果更新 sendVapStatus。<br>更新状态：<br>调用 jcShopDamagePartsDao.updateSendVapStatusByDamageId 方法更新推送状态。<br>记录日志：记录最终的返回信息。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">    @Test</span><br><span class="line">    public void testMethodName() &#123;</span><br><span class="line">        extracted();</span><br><span class="line">        List&lt;Person&gt; personList1 = getPeople();</span><br><span class="line"></span><br><span class="line">//        extracted1();</span><br><span class="line"></span><br><span class="line">//        extracted2(personList1);</span><br><span class="line"></span><br><span class="line">//        extracted3(personList1);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 4, 11, 6);</span><br><span class="line"></span><br><span class="line">        // 自然排序</span><br><span class="line">        Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">        // 自定义排序（从大到小排序）</span><br><span class="line">//        Optional&lt;Integer&gt; min = list.stream().max();</span><br><span class="line">//        Optional&lt;Integer&gt; max22 = list.stream().max((o1, o2) -&gt; o2 - o1);</span><br><span class="line">//        Optional&lt;Integer&gt; max2 = list.stream().min((o2, o1) -&gt; o2 - o1);</span><br><span class="line">//        System.out.println(&quot;自然排序的最大值：&quot; + max.get());</span><br><span class="line">//        System.out.println(&quot;自定义排序的最大值：&quot; + max2.get());</span><br><span class="line">//        System.out.println(&quot;自定义排序的22最大值：&quot; + max22.get());</span><br><span class="line">//        System.out.println(&quot;自定义排序的最小值：&quot; + min.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        Optional&lt;Person&gt; max = personList1.stream().min(Comparator.comparing(Person::getName));</span><br><span class="line">//        System.out.println(&quot;最长的字符串：&quot; + max.get());</span><br><span class="line"></span><br><span class="line">//        Optional&lt;Person&gt; max1 = personList1.stream().max(Comparator.comparing(Person::getSalary));</span><br><span class="line">//        System.out.println(&quot;员工薪资最大值：&quot; + max1.get().getSalary());</span><br><span class="line">//        System.out.println(5500*12);</span><br><span class="line">//        extracted4(personList1);</span><br><span class="line"></span><br><span class="line">//        extracted6();</span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(&quot;mu&quot;, &quot;CSDN&quot;, &quot;hello&quot;,</span><br><span class="line">                &quot;world&quot;, &quot;quickly&quot;);</span><br><span class="line">        stringList.stream().mapToInt(String::length).forEach(x -&gt; System.out.print(x+&quot; &quot;));</span><br><span class="line">        // 将int集合的每个元素增加1000</span><br><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(4, 5, 2, 1, 6, 3);</span><br><span class="line">        integerList.stream().mapToInt(x -&gt; x + 1000).forEach(x -&gt; System.out.print(x+&quot; &quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void extracted6() &#123;</span><br><span class="line">        List&lt;String&gt; lis2t = Arrays.asList(&quot;m-k-l-a&quot;, &quot;1-3-5-7&quot;);</span><br><span class="line">        List&lt;String&gt; collect = lis2t.stream().flatMap(s -&gt; &#123;</span><br><span class="line">            String[] split = s.split(&quot;-&quot;);</span><br><span class="line">            return Arrays.stream(split);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; listNew = lis2t.stream().flatMap(s -&gt; &#123;</span><br><span class="line">            // 将每个元素转换成一个stream</span><br><span class="line">            String[] split = s.split(&quot;-&quot;);</span><br><span class="line">            Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">            return s2;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;处理前的集合：&quot; + lis2t+&quot;-----&quot; +collect);</span><br><span class="line">        System.out.println(&quot;处理后的集合：&quot; + listNew);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted4(List&lt;Person&gt; personList1) &#123;</span><br><span class="line">        List&lt;Person&gt; collect = personList1.stream().map(person -&gt; &#123;</span><br><span class="line">            Person person1 = new Person(person.getName(), person.getSalary(), person.getAge(), person.getSex(), person.getArea());</span><br><span class="line">            person1.setSalary(person.getSalary() + 10000);</span><br><span class="line">            return person1;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(&quot;一次改动前：&quot; + personList1 + &quot;--&gt;&quot; + personList1.get(0).getSalary());</span><br><span class="line">        System.out.println(&quot;一次改动后：&quot; + collect + &quot;--&gt;&quot; + collect.get(0).getSalary());</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; collect2 = personList1.stream().map(person -&gt; &#123;</span><br><span class="line">            person.setSalary(person.getSalary() + 10000);</span><br><span class="line">            return person;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(&quot;一次改动前：&quot; + personList1 + &quot;--&gt;&quot; + personList1.get(0).getSalary());</span><br><span class="line">        System.out.println(&quot;一次改动后：&quot; + collect2 + &quot;--&gt;&quot; + collect2.get(0).getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted3(List&lt;Person&gt; personList1) &#123;</span><br><span class="line">        Optional&lt;Person&gt; max = personList1.stream()</span><br><span class="line">                .filter(x -&gt; x.getSalary() &gt; 100000)</span><br><span class="line">                .max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">        System.out.println(max.orElse(null));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted2(List&lt;Person&gt; personList1) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map =  personList1.stream().filter(x -&gt; x.getSalary() &gt; 8000).collect(Collectors.toMap(Person::getName, Person::getAge));</span><br><span class="line">        System.out.print(&quot;薪资高于8000美元的员工：&quot; + map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;Person&gt; getPeople() &#123;</span><br><span class="line">        List&lt;Person&gt; personList1 = new ArrayList&lt;Person&gt;();</span><br><span class="line">        personList1.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Owen&quot;, 95000, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList1.add(new Person(&quot;Alisa&quot;, 79000, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        return personList1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void extracted() &#123;</span><br><span class="line">        List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(new Person(&quot;Tom&quot;, 8900, 18,&quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Jack&quot;, 7000, 20,&quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Lily&quot;, 7800, 22,&quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Anni&quot;, 8200, 28,&quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Owen&quot;, 9500, 30,&quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Alisa&quot;, 7900, 40,&quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void extracted1() &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);</span><br><span class="line">        // 遍历输出符合条件的元素</span><br><span class="line">        list.stream().filter(x -&gt; x&gt;6).forEach(System.out::println);</span><br><span class="line">        // 匹配第一个</span><br><span class="line">        Optional&lt;Integer&gt; first = list.stream().filter(x -&gt; x &gt; 8).findFirst();</span><br><span class="line">        // 匹配任意（适用于并行流）</span><br><span class="line">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; 6).findAny();</span><br><span class="line">        // 是否包含符合特定条件的元素</span><br><span class="line">        boolean anyMatch = list.stream().anyMatch(x -&gt; x &gt; 6);</span><br><span class="line">        System.out.println(&quot;匹配第一个值：&quot; + first.get());</span><br><span class="line">        System.out.println(&quot;匹配任意一个值：&quot; + findAny.get());</span><br><span class="line">        System.out.println(&quot;是否存在大于6的值：&quot; + anyMatch);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    public class Person &#123;</span><br><span class="line">        private String name;  // 姓名</span><br><span class="line">        private int salary; // 薪资</span><br><span class="line">        private int age; // 年龄</span><br><span class="line">        private String sex; //性别</span><br><span class="line">        private String area;  // 地区</span><br><span class="line"></span><br><span class="line">        // 构造方法</span><br><span class="line">        public Person(String name, int salary, int age,String sex,String area) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.salary = salary;</span><br><span class="line">            this.age = age;</span><br><span class="line">            this.sex = sex;</span><br><span class="line">            this.area = area;</span><br><span class="line">        &#125;</span><br><span class="line">        // 省略了get和set，请自行添加</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询定损单照片</span><br><span class="line"> * @param registNo</span><br><span class="line"> * @param damageNo</span><br><span class="line"> * @param infoid</span><br><span class="line"> * @param carNo</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public R getDamagePicture(GetClaimPhotoReqVo vo) &#123;</span><br><span class="line">    Res damagePicture = janpEnquiryInnerClient.getDamagePicture(vo);</span><br><span class="line">    ArrayList date = (ArrayList) damagePicture.getData();</span><br><span class="line">    if(date!=null)&#123;</span><br><span class="line">        if(&quot;200&quot;.equals(damagePicture.getCode()))&#123;</span><br><span class="line">            return R.ok(&quot;成功&quot;,date);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return R.error(damagePicture.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return R.error();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询定损单照片</span><br><span class="line">     * @param registNo</span><br><span class="line">     * @param damageNo</span><br><span class="line">     * @param infoid</span><br><span class="line">     * @param carNo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public R getDamagePicture(GetClaimPhotoReqVo vo) &#123;</span><br><span class="line">        Res damagePicture = janpEnquiryInnerClient.getDamagePicture(vo);</span><br><span class="line">        ArrayList date = (ArrayList) damagePicture.getData();</span><br><span class="line">        if(date!=null)&#123;</span><br><span class="line">            if(&quot;200&quot;.equals(damagePicture.getCode()))&#123;</span><br><span class="line">                return R.ok(&quot;成功&quot;,date);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return R.error(damagePicture.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return R.error();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if(&quot;AIYH&quot;.equals(shopDamage.getChannelSource()) || &quot;24&quot;.equals(shopDamage.getDataSource()))&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h5><p>1.git Reset Current Branch to Here 回退到这个版本,之前的版本都会取消</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399624717.png"                      alt="73439962471"                ></p><p>2.git Revert 某一个版本撤回,保留之后的版本,生成新的版本</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399642044.png"                      alt="73439964204"                ></p><table><thead><tr><th></th><th>工作区</th><th>暂存区</th><th>版本库</th></tr></thead><tbody><tr><td>soft</td><td>不变</td><td>不变</td><td>回退</td></tr><tr><td>maed</td><td>不变</td><td>回退</td><td>回退</td></tr><tr><td>hard</td><td>回退</td><td>回退</td><td>回退</td></tr></tbody></table><p>git reflog 看历史记录,记录前面的id git -&gt;Reset HEAD -&gt;To commit,将id赋值,-&gt;vaildate-&gt;选择Hard-&gt;reset</p><h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><p>rollback</p><h5 id="搁置当前"><a href="#搁置当前" class="headerlink" title="搁置当前"></a>搁置当前</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734316127427.png"                      alt="73431612742"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734316141938.png"                      alt="73431614193"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734316168813.png"                      alt="73431616881"                ></p><p>​Changes可以修改名字,记录搁置的信息</p><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p>用git 删除记录文件</p><h5 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734326915273.png"                      alt="73432691527"                ></p><p>git fetch 和 git pull 前者是更新但是不合并,需要先查看更新 git log -p FETCH_HEAD 然后再git merge origin&#x2F;master ,</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734334939877.png"                      alt="73433493987"                ></p><p>merge用共用分支</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399738570.png"                      alt="73439973857"                ></p><p>Rebase用于私有分支</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734399747407.png"                      alt="73439974740"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734335310378.png"                      alt="73433531037"                ></p><p>Undo Commit 撤回,如果没有Push的话, 没有记录\</p><h5 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734335971868.png"                      alt="73433597186"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/His-Smile/pic_bed/img/202412181046717.png"                      alt="image-20241218104631599"                ></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客有感</title>
      <link href="/2024/11/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%9C%89%E6%84%9F/"/>
      <url>/2024/11/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客,在这里我将记录不限定内容,希望大家玩的开心,关于博客有关内容可以加我的qq向我咨询,网站已开源,欢迎大家来我的github上,不要忘记给个star哦,这对我非常重要!</p><h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>记录!</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1731722068831.png"                      alt="73172206883"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1731722087398.png"                      alt="73172208739"                ></p><p>注意:在K8s构建流水线的时候,不可以直接选择执行,一定要退出来再选择执行重新构建,不然会默认走一遍历史的版本来构建,不会更新新提交的代码逻辑!!!<br>$$<br>x&#x3D;1&#x2F;2+lim(x+8)&#x2F;33<br>$$</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std:</span><br><span class="line">int mian()&#123;</span><br><span class="line">    printf(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>默认branch拉去git就是测试环境,如果从tag拉去就是上生产了</p><h4 id="使用流来请求并且接收api"><a href="#使用流来请求并且接收api" class="headerlink" title="使用流来请求并且接收api"></a>使用流来请求并且接收api</h4><p>通过流来请求url路径并且获取数据</p><h4 id="流操作-构建Map"><a href="#流操作-构建Map" class="headerlink" title="流操作,构建Map&lt;Long,Map&lt;Long,Long&gt;&gt;"></a>流操作,构建Map&lt;Long,Map&lt;Long,Long&gt;&gt;</h4><h4 id="事务操作-在一个事务里面执行远程调用服务回调"><a href="#事务操作-在一个事务里面执行远程调用服务回调" class="headerlink" title="事务操作,在一个事务里面执行远程调用服务回调"></a>事务操作,在一个事务里面执行远程调用服务回调</h4><p>通过加入节点的方式也就是rabbitmq,使用封装过的</p><p><a class="link"   href="https://blog.csdn.net/qq_45990281/article/details/142397092?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-142397092-blog-106024311.235%5Ev43%5Epc_blog_bottom_relevance_base3&spm=1001.2101.3001.4242.1&utm_relevant_index=3" >https://blog.csdn.net/qq_45990281/article/details/142397092?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-142397092-blog-106024311.235^v43^pc_blog_bottom_relevance_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1732959155321.png"                      alt="73295914339"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1732959163232.png"                      alt="73295916323"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/assets/1734026296897.png"                      alt="73402629689"                ></p>]]></content>
      
      
      
        <tags>
            
            <tag> cool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/11/07/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/11/07/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure></div><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure></div><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a class="link"   href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd" >https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png"                      alt="结构图"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89.png"                      alt="层级描述"                ></p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure></div><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png"                      alt="InnoDB逻辑存储结构"                ></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：<br># 开启慢查询日志开关<br>slow_query_log&#x3D;1<br># 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>long_query_time&#x3D;2<br>更改后记得重启MySQL服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session&#x2F;global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br># 直接在select语句之前加上关键字 explain &#x2F; desc<br>EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%A0%91.png"                      alt="二叉树"                ></p><p>二叉树的缺点可以用红黑树来解决：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A2%E9%BB%91%E6%A0%91.png"                      alt="红黑树"                ><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/B-Tree%E7%BB%93%E6%9E%84.png"                      alt="B-Tree结构"                ></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a class="link"   href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68" >https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>演示地址：<a class="link"   href="https://www.cs.usfca.edu/~galles/visualization/BTree.html" >https://www.cs.usfca.edu/~galles/visualization/BTree.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE.png"                      alt="B+Tree结构图"                ></p><blockquote><p>演示地址：<a class="link"   href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html" >https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BB%93%E6%9E%84%E5%9B%BE.png"                      alt="MySQL B+Tree 结构图"                ></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE"                      alt="Hash索引原理图"                ></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（&#x3D;、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8E%9F%E7%90%86%E5%9B%BE.png"                      alt="大致原理"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%BC%94%E7%A4%BA%E5%9B%BE.png"                      alt="演示图"                ></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>\1. 以下 SQL 语句，哪个执行效率高？为什么？</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure></div><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>\2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure></div><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-回表查询"><a href="#覆盖索引-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure></div><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-联合索引"><a href="#单列索引-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure></div><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a class="link"   href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90" >https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure></div><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(<em>) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(</em>) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(<em>)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(</em>)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(<em>)，所以尽量使用 count(</em>)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/07/hello-world/"/>
      <url>/2024/11/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://cdn.jsdelivr.net/gh/His-Smile/pic_bed/img/202412181134357.jpg" >https://cdn.jsdelivr.net/gh/His-Smile/pic_bed/img/202412181134357.jpg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
